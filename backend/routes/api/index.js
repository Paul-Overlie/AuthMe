// backend/routes/api/index.js
const router = require('express').Router();
const { restoreUser, requireAuth } = require('../../utils/auth.js');
const sessionRouter = require('./session.js')
const usersRouter = require('./users.js')
const groupsRouter = require('./groups.js')
const {Venue, Group} = require("../../db/models")
const eventsRouter = require("./events.js")

router.use(restoreUser);

router.use('/session', sessionRouter)

router.use('/users', usersRouter)

router.use('/groups', groupsRouter)

router.use("/events", eventsRouter)

router.post('/test', (req, res) =>{
    res.json({user: {
        id,
        firstName,
        lastName,
        email,
        userName
    }})})

//Edit a venue by id
router.put("/venues/:venueId", requireAuth, async(req,res,next)=>{
    let ven = await Venue.findOne({where:{id: req.params.venueId}})
    if(!ven){
        res.statusCode=404
        res.json({message: "Venue couldn't be found"})
    }
    try{
        let group = await Group.findOne({where:{id:ven.groupId}})
        //authorization
        if(group.organizerId!==req.user.dataValues.id&&req.user.dataValues.status!=="co-host"){
            res.statusCode=403
            res.json({
                "message": "Forbidden"
            })
        }
        
        let {address, city, state, lat, lng}=req.body
        if(address){ven.address=address}
        if(city){ven.city=city}
        if(state){ven.state=state}
        if(lat){ven.lat=lat}
        if(lng){ven.lng=lng}
        await ven.save()
        
        res.statusCode=200
        res.json(ven)
    }catch(err){res.statusCode=400
    res.json({
        "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
        "errors": {
          "address": "Street address is required",
          "city": "City is required",
          "state": "State is required",
          "lat": "Latitude must be within -90 and 90",
          "lng": "Longitude must be within -180 and 180",
        }
      })}
    })
    
    module.exports = router;